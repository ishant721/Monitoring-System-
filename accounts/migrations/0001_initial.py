# Generated by Django 5.2.3 on 2025-06-20 07:25

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Primary email address, used for login.', max_length=254, unique=True)),
                ('role', models.CharField(choices=[('USER', 'User (Employee)'), ('ADMIN', 'Admin (Company)'), ('SUPERADMIN', 'Superadmin')], default='USER', max_length=10)),
                ('phone_number', models.CharField(blank=True, help_text='Optional phone number, e.g., +12223334444', max_length=17, null=True, unique=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False, help_text='Overall account active status. Admins also need active access type and approval.')),
                ('max_allowed_users', models.PositiveIntegerField(blank=True, default=0, help_text='For ADMIN: Max active users they can manage. Set to 0 if their access expires.', null=True)),
                ('admin_account_type', models.CharField(choices=[('NONE', 'Not Set'), ('TRIAL', 'Trial Account'), ('SUBSCRIBED', 'Subscribed Account'), ('EXPIRED', 'Expired/Locked')], default='NONE', help_text='Type of account for Admins (e.g., Trial, Subscribed, Expired).', max_length=20)),
                ('access_ends_at', models.DateTimeField(blank=True, help_text='When current access (Trial or Subscription) for this Admin ends.', null=True)),
                ('trial_extension_requested', models.BooleanField(default=False, help_text='Flag if ADMIN requested trial extension.')),
                ('trial_extension_reason', models.TextField(blank=True, help_text="Reason for ADMIN's trial extension request.", null=True)),
                ('access_granted_by', models.ForeignKey(blank=True, help_text='Superadmin who approved or last modified the access period for this Admin.', limit_choices_to={'role': 'SUPERADMIN'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_admin_access_set', to=settings.AUTH_USER_MODEL)),
                ('approved_by', models.ForeignKey(blank=True, help_text="User who approved this account's activation.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_entities', to=settings.AUTH_USER_MODEL)),
                ('company_admin', models.ForeignKey(blank=True, help_text='For USER role, links to their Company Admin.', limit_choices_to={'role': 'ADMIN'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_employees', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_groups_set', related_query_name='customuser_group', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_permissions_set', related_query_name='customuser_permission', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
